//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Clicker.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Clicker: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Clicker()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Clicker"",
    ""maps"": [
        {
            ""name"": ""OnClick"",
            ""id"": ""c8ca067a-e643-4a3a-8a3d-ea457ceb8a80"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""ef2a67cd-2793-4e41-8daf-37edf0e60bc7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""126a0439-3da5-462c-8811-5f83db30e469"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7418af0-2672-4d07-82bc-aeae3f6c6ea8"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // OnClick
        m_OnClick = asset.FindActionMap("OnClick", throwIfNotFound: true);
        m_OnClick_Click = m_OnClick.FindAction("Click", throwIfNotFound: true);
    }

    ~@Clicker()
    {
        UnityEngine.Debug.Assert(!m_OnClick.enabled, "This will cause a leak and performance issues, Clicker.OnClick.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OnClick
    private readonly InputActionMap m_OnClick;
    private List<IOnClickActions> m_OnClickActionsCallbackInterfaces = new List<IOnClickActions>();
    private readonly InputAction m_OnClick_Click;
    public struct OnClickActions
    {
        private @Clicker m_Wrapper;
        public OnClickActions(@Clicker wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_OnClick_Click;
        public InputActionMap Get() { return m_Wrapper.m_OnClick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnClickActions set) { return set.Get(); }
        public void AddCallbacks(IOnClickActions instance)
        {
            if (instance == null || m_Wrapper.m_OnClickActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnClickActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IOnClickActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IOnClickActions instance)
        {
            if (m_Wrapper.m_OnClickActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnClickActions instance)
        {
            foreach (var item in m_Wrapper.m_OnClickActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnClickActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnClickActions @OnClick => new OnClickActions(this);
    public interface IOnClickActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
}
